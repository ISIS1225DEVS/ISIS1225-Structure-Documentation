####################################
Guía de documentación
####################################

Como usar la documentación
---------------------------------

.. _RST Overview:

La documentación del curso está diseñada para guiarlo en la implementación de archivos, funciones y elementos que serán usados en actividades a lo largo del semestre. Cada sección de la documentación contiene una descripción detallada de la función o estructura de datos que se debe implementar, incluyendo su propósito, parámetros y comportamiento esperado.

Al seguir las instrucciones de la documentación, podrá implementar las funciones de manera efectiva y asegurarse de que cumplen con los requisitos del curso convirtiendo la descripción en código funcional.

Ejemplo práctico: implementar :func:`new_set()`
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#. Valide que en la carpeta ``DataStructures/`` de su proyecto exista la carpeta ``Set/``. Si no existe la carpeta ``Set/`` y cree el archivo :ref:`set.py`.
#. Adicionalmente en la carpeta ``Set/`` cree el archivo ``__init__.py``. El cual debe estar vacío y es necesario para que Python reconozca la carpeta como un paquete.

   .. figure:: static/set_example.png
      :class: with-border
      :align: center

      Carpeta ``Set/`` en ``DataStructures/``

   .. important:: Siempre que esté iniciando el desarrollo de una nueva estructura de datos, deberá asegurarse de crear la carpeta de la estrcutura correspondiente dentro de la carpeta ``DataStructures/`` de su proyecto. Además, deberá crear el archivo ``__init__.py`` dentro de la carpeta de la estructura de datos.

#. Una vez creado el archivo :ref:`set.py`, lea la descripción de la función :func:`new_set()`. La descripción de la función dice lo siguiente:

   .. code-block::
      :emphasize-lines: 5,6

      Crea un conjunto (set) vacio el cuál permite almacenar elementos únicos sin un orden específico.

      El conjunto (set) es creado con los siguientes atributos inicializados:

      - size: Tamaño del conjunto, inicializado en 0.
      - elements: Lista de elementos del conjunto. Inicializada como array vacio.
      
      Returns:       Conjuto vacío creado recien inicializado
      Return type:   set

#. Basado en la descripción de la función, identifique la estructura del conjunto que se debe implementar. En este caso, el conjunto debe tener los siguientes atributos:

   - Un atributo ``size`` que indica el número de elementos.
   - Un array ``elements`` que almacena los elementos del conjunto.

#. Implemente la función :func:`new_set()` en el archivo :ref:`set.py` basándose en la descripción y la estructura identificada. Para esto siga los siguientes pasos:

   1. Cree un diccionario que represente la estructura del conjunto.
   2. Defina ``size`` como 0, ya que el conjunto está vacío al inicio.
   3. Defina ``elements`` como una lista vacía.

   .. code-block:: python
      :linenos:

      def new_set():
         my_new_set = {
            'size': 0,
            'elements': []
         }

#. Al revisar nuevamente la descripción de la función, observe que la función debe devolver un "Conjuto vacio recien inicializado" de tipo ``set``. Por lo tanto, la función debe retornar el conjunto creado.

   .. code-block:: python
      :linenos:
      :emphasize-lines: 6

      def new_set():
         my_new_set = {
            'size': 0,
            'elements': []
         }
         return my_new_set

#. Para verificar que la función :func:`new_set()` cumple con su propósito, pruébela con un caso simple.

   .. code-block:: python

      # App/logic.py
      from DataStructures import Set as set

      # Crear un conjunto vacío
      my_set = set.new_set()
      print(my_set) # Salida esperada: {'size': 0, 'elements': []}

#. Si la salida es la esperada, la función :func:`new_set()` ha sido implementada correctamente. 
   
   .. code-block:: json

      {
         "size": 0,
         "elements": []
      }

Consejos generales para usar la documentación
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

#. Identifique la entrada y salida:

   - La sección ``Parameters`` describe las entradas que debe recibir la función.
   - La sección ``Returns`` detalla el tipo y contenido de la salida.

#. Lea la descripción de la función para entender su propósito y comportamiento esperado.

#. Implemente la función basándose en la descripción y la estructura identificada.

#. Pruebe la función con casos simples para verificar su correcto funcionamiento.