.. py:function:: new_list()

   Crea una lista (de tipo :ref:`array_list<array-list>`) vacía.

   La lista es creada con los siguientes atributos:

   * **size**: Tamaño actual de la lista, inicializado en 0.
   * **elements**: Lista de elementos, inicializada en una lista vacía.

   :returns: Lista vacía recien creada.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()
         print(lista) # Salida esperada: {'size': 0, 'elements': []}

   :Test Scenarios:
      - **Inicialización**: Se crea una lista vacía.

         .. code-block:: json

            {
               "size": 0,
               "elements": []
            }

.. py:function:: is_empty(my_list)
   
   Verifica si la lista está vacía.

   :param my_list: Lista a verificar.
   :type my_list: :ref:`array_list<array-list>`

   :returns: ``True`` si la lista está vacía, ``False`` en caso contrario.
   :rtype: bool

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()
         print(al.is_empty(lista)) # Salida esperada: True

         # Agrega un elemento a la lista
         lista = al.add_last(lista, 1)
         print(al.is_empty(lista)) # Salida esperada: False

   :Test Scenarios:
      - **Lista vacía**: Se verifica si la lista está vacía.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.is_empty(lista)) # Salida esperada: True

      - **Lista con elementos**: Se verifica si la lista con elementos está vacía.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            print(al.is_empty(lista)) # Salida esperada: False

.. py:function:: size(my_list)

   Retorna el tamaño de la lista.

   :param my_list: Lista de la cual se obtendrá el tamaño.
   :type my_list: :ref:`array_list<array-list>`

   :returns: Tamaño de la lista.
   :rtype: int

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()
         print(al.size(lista)) # Salida esperada: 0

         # Agrega un elemento a la lista
         lista = al.add_last(lista, 1)
         print(al.size(lista)) # Salida esperada: 1

   :Test Scenarios:
      - **Lista vacía**: Se obtiene el tamaño de la lista vacía.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.size(lista)) # Salida esperada: 0

      - **Lista con elementos**: Se obtiene el tamaño de la lista con elementos.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            print(al.size(lista)) # Salida esperada: 1

.. py:function:: add_first(my_list, element)

   Agrega un elemento al inicio de la lista.

   Inserta el elemento al inicio de la lista y actualiza el tamaño de la lista en 1.

   :param my_list: Lista a la cual se le agregará el elemento.
   :type my_list: :ref:`array_list<array-list>`
   :param element: Elemento a agregar.
   :type element: any

   :returns: Lista con el elemento agregado al inicio.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()
         print(lista) # Salida esperada: {'size': 0, 'elements': []}

         # Agrega un elemento al inicio
         lista = al.add_first(lista, 1)
         print(lista) # Salida esperada: {'size': 1, 'elements': [1]}

   :Test Scenarios:
      - **Agrega un elemento al inicio**: Se agrega un elemento al inicio de la lista vacía.

         .. code-block:: json

            {
               "size": 1,
               "elements": [1]
            }

      - **Agrega un elemento al inicio**: Se agrega un elemento al inicio de la lista con elementos.

         .. code-block:: python
            
            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_first(lista, 1)

            # Agrega un elemento al inicio
            lista = al.add_first(lista, 2)
            print(lista) # Salida esperada: {'size': 2, 'elements': [2, 1]}

.. py:function:: add_last(my_list, element)

   Agrega un elemento al final de la lista.

   Inserta el elemento al final de la lista y aumenta el tamaño de la lista en 1.

   :param my_list: Lista a la cual se le agregará el elemento.
   :type my_list: :ref:`array_list<array-list>`
   :param element: Elemento a agregar.
   :type element: any

   :returns: Lista con el elemento agregado al final.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()
         print(lista) # Salida esperada: {'size': 0, 'elements': []}

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         print(lista) # Salida esperada: {'size': 1, 'elements': [1]}

   :Test Scenarios:
      - **Agrega un elemento al final**: Se agrega un elemento al final de la lista vacía.

         .. code-block:: json

            {
               "size": 1,
               "elements": [1]
            }

      - **Agrega un elemento al final**: Se agrega un elemento al final de la lista con elementos.

         .. code-block:: python
            
            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)

            # Agrega un elemento al final
            lista = al.add_last(lista, 2)
            print(lista) # Salida esperada: {'size': 2, 'elements': [1, 2]}


.. py:function:: first_element(my_list)

   Retorna el primer elemento de una lista no vacía.

   Retorna el primer elemento de la lista. Si la lista está vacía, lanza un error :code:`IndexError: list index out of range`.
   Esta función no elimina el elemento de la lista.

   :param my_list: Lista de la cual se obtendrá el primer elemento.
   :type my_list: :ref:`array_list<array-list>`

   :returns: Primer elemento de la lista.
   :rtype: any

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al inicio
         lista = al.add_first(lista, 1)
         print(al.first_element(lista)) # Salida esperada: 1

   :Test Scenarios:
      - **Lista vacía**: Lanza un error al intentar obtener el primer elemento de la lista vacía.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.first_element(lista)) 
            # Salida esperada: "IndexError: list index out of range"

      - **Lista con elementos**: Se obtiene el primer elemento de la lista con elementos.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_first(lista, 2)
            lista = al.add_first(lista, 1)
            print(al.first_element(lista)) # Salida esperada: 1

.. py:function:: last_element(my_list)
   
   Retorna el último elemento de la lista no vacía.

   Retorna el último elemento de la lista. Si la lista está vacía, lanza un error :code:`IndexError: list index out of range`.
   Esta función no elimina el elemento de la lista.

   :param my_list: Lista de la cual se obtendrá el último elemento.
   :type my_list: :ref:`array_list<array-list>`

   :returns: Último elemento de la lista.
   :rtype: any

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         print(al.last_element(lista)) # Salida esperada: 2

   :Test Scenarios:
      - **Lista vacía**: Lanza un error al intentar obtener el último elemento de la lista vacía.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.last_element(lista))
            # Salida esperada: "IndexError: list index out of range"

      - **Lista con elementos**: Se obtiene el último elemento de la lista con elementos.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            print(al.last_element(lista)) # Salida esperada: 1

.. py:function:: get_element(my_list, pos)

   Retorna el elemento en la posición dada.

   Retorna el elemento en la posición ``pos``, la cual debe ser igual o mayor a cero y menor al tamaño de la lista. :code:`0 <= pos < size(my_list)`.
   Si la posición no es válida, lanza un error :code:`IndexError: list index out of range`.
   Esta función no elimina el elemento de la lista.

   :param my_list: Lista de la cual se obtendrá el elemento.
   :type my_list: :ref:`array_list<array-list>`
   :param pos: Posición del elemento a obtener.
   :type pos: int

   :returns: Elemento en la posición dada.
   :rtype: any

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         print(al.get_element(lista, 1)) # Salida esperada: 2

   :Test Scenarios:
      - **Posición inválida**: Se obtiene el elemento en una posición inválida.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.get_element(lista, 0))
            # Salida esperada: "IndexError: list index out of range"

      - **Posición válida**: Se obtiene el elemento en una posición válida.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            print(al.get_element(lista, 1)) # Salida esperada: 2

.. py:function:: delete_element(my_list, pos)

   Elimina el elemento en la posición dada.

   Elimina el elemento en la posición ``pos``, La cual debe ser igual o mayor a cero y menor al tamaño de la lista. :code:`0 <= pos < size(my_list)`.
   Si la posición no es válida, lanza un error :code:`IndexError: list index out of range`.

   :param my_list: Lista de la cual se eliminará el elemento.
   :type my_list: :ref:`array_list<array-list>`
   :param pos: Posición del elemento a eliminar.
   :type pos: int

   :returns: Lista con el elemento eliminado.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         print(lista) # Salida esperada: {'size': 2, 'elements': [1, 2]}

         # Elimina el elemento en la posición 1
         print(al.delete_element(lista, 1)) # Salida esperada: {'size': 1, 'elements': [1]}

   :Test Scenarios:
      - **Posición inválida**: Se elimina el elemento en una posición inválida.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.delete_element(lista, 0))
            # Salida esperada: "IndexError: list index out of range"

      - **Posición válida**: Se elimina el elemento en una posición válida.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            print(al.delete_element(lista, 1)) # Salida esperada: {'size': 1, 'elements': [1]}


.. py:function:: remove_first(my_list)

   Elimina el primer elemento de la lista.

   Elimina el primer elemento de la lista y disminuye el tamaño de la lista en 1.
   Si la lista está vacía, lanza un error :code:`IndexError: list index out of range`.

   :param my_list: Lista de la cual se eliminará el primer elemento.
   :type my_list: :ref:`array_list<array-list>`

   :returns: Lista con el primer elemento eliminado.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         print(lista) # Salida esperada: {'size': 2, 'elements': [1, 2]}

         # Elimina el primer elemento
         print(al.remove_first(lista)) # Salida esperada: {'size': 1, 'elements': [2]}

   :Test Scenarios:
      - **Lista vacía**: Lanza un error al intentar eliminar el primer elemento de la lista vacía.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.remove_first(lista))
            # Salida esperada: "IndexError: list index out of range"

      - **Lista con elementos**: Se elimina el primer elemento de la lista con elementos.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            print(al.remove_first(lista)) # Salida esperada: {'size': 1, 'elements': [2]}

.. py:function:: remove_last(my_list)

   Elimina el último elemento de la lista.

   Elimina el último elemento de la lista y disminuye el tamaño de la lista en 1.
   Si la lista está vacía, lanza un error :code:`IndexError: list index out of range`.

   :param my_list: Lista de la cual se eliminará el último elemento.
   :type my_list: :ref:`array_list<array-list>`

   :returns: Lista con el último elemento eliminado.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         print(lista) # Salida esperada: {'size': 2, 'elements': [1, 2]}

         # Elimina el último elemento
         print(al.remove_last(lista)) # Salida esperada: {'size': 1, 'elements': [1]}

   :Test Scenarios:
      - **Lista vacía**: Lanza un error al intentar eliminar el último elemento de la lista vacía.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.remove_last(lista))
            # Salida esperada: "IndexError: list index out of range"

      - **Lista con elementos**: Se elimina el último elemento de la lista con elementos.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            print(al.remove_last(lista)) # Salida esperada: {'size': 1, 'elements': [1]}

.. py:function:: insert_element(my_list, element, pos)

   Inserta un elemento en la posición dada.

   Inserta el elemento en la posición ``pos``. La lista puede estar vacia o tener elementos.
   Se incrementa el tamaño de la lista en 1.

   :param my_list: Lista en la cual se insertará el elemento.
   :type my_list: :ref:`array_list<array-list>`
   :param element: Elemento a insertar.
   :type element: any
   :param pos: Posición en la cual se insertará el elemento.
   :type pos: int

   :returns: Lista con el elemento insertado.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 3)
         print(lista) # Salida esperada: {'size': 2, 'elements': [1, 3]}

         # Inserta el elemento 2 en la posición 1
         print(al.insert_element(lista, 2, 1)) # Salida esperada: {'size': 3, 'elements': [1, 2, 3]}

   :Test Scenarios:
      
      - **Lista vacia**: Se inserta un elemento en una lista vacía.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.insert_element(lista, 1, 0)) # Salida esperada: {'size': 1, 'elements': [1]}

      - **Lista con elementos**: Se inserta un elemento en una lista con elementos.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 3)
            print(al.insert_element(lista, 2, 1)) # Salida esperada: {'size': 3, 'elements': [1, 2, 3]}

.. _default-function-array:

.. py:function:: default_function(element_1, element_2)

   Función de comparación por defecto a modo de ejemplo.

   Esta función de comparación por defecto compara dos elementos y retorna ``0`` si son iguales, ``1`` si el ``element_1`` es mayor que ``element_2`` y ``-1`` si ``element_1`` es menor que ``element_2``.

   .. admonition:: Imporante
      :class: note

      Una ``cmp_function`` es una función de comparación que recibe dos elementos y retorna un valor entero. 
      Use esta función como referencia para crear su propia función de comparación donde los criterios de comparación pueden ser definidos dependiendo del tipo de elementos y su contexto. 

   :param element_1: Primer elemento a comparar.
   :type element_1: any
   :param element_2: Segundo elemento a comparar.
   :type element_2: any

   :returns: ``0`` si los elementos son iguales, ``1`` si el primer elemento es mayor que el segundo y ``-1`` en caso contrario.
   :rtype: int

   :Code example:
      .. code-block:: python

         def default_function(elemen_1, element_2):
  
            if elemen_1 > element_2:
               return 1
            elif elemen_1 < element_2:
               return -1
            return 0


.. py:function:: is_present(my_list, element, cmp_function)
   
   Verifica si un elemento está presente en la lista.

   Para comparar los elementos, se utiliza la función de comparación ``cmp_function``.
   Si el elemento está presente retorna ``True``, en caso contrario retorna ``False``.

   .. admonition:: Imporante
      :class: note

      Una ``cmp_function`` es una función de comparación que recibe dos elementos y retorna un valor entero. Este valor entero debe ser ``0`` si los elementos son iguales, ``1`` si el primer elemento es mayor que el segundo y ``-1`` en caso contrario.
      Use la función de comparación por defecto :ref:`default_function<default-function-array>` como referencia para crear su propia función de comparación.

   :param my_list: Lista en la cual se buscará el elemento.
   :type my_list: :ref:`array_list<array-list>`
   :param element: Elemento a buscar.
   :type element: any
   :param cmp_function: Función de comparación.
   :type cmp_function: function

   :returns: ``True`` si el elemento está presente, ``False`` en caso contrario.
   :rtype: bool

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Función de comparación por defecto
         cmp_function = al.default_function

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         print(al.is_present(lista, 2, cmp_function)) # Salida esperada: True

   :Test Scenarios:
      - **Elemento presente**: Se verifica si un elemento está presente en la lista.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Función de comparación por defecto
            cmp_function = al.default_function

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            print(al.is_present(lista, 2, cmp_function)) 
            # Salida esperada: True

      - **Elemento no presente**: Se verifica si un elemento no está presente en la lista.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Función de comparación por defecto
            cmp_function = al.default_function

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            print(al.is_present(lista, 3, cmp_function)) 
            # Salida esperada: False

.. py:function:: change_info(my_list, pos, new_info)

   Cambia la información de un elemento en la posición dada.

   Cambia la información del elemento en la posición ``pos`` por la información ``new_info``.
   Si la posición no es válida, lanza un error :code:`IndexError: list index out of range`.

   :param my_list: Lista en la cual se cambiará la información del elemento.
   :type my_list: :ref:`array_list<array-list>`
   :param pos: Posición del elemento a cambiar.
   :type pos: int
   :param new_info: Nueva información del elemento.
   :type new_info: any

   :returns: Lista con la información del elemento cambiada.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         print(lista) # Salida esperada: {'size': 2, 'elements': [1, 2]}

         # Cambia la información del elemento en la posición 1
         print(al.change_info(lista, 1, 3)) # Salida esperada: {'size': 2, 'elements': [1, 3]}

   :Test Scenarios:
      - **Posición inválida**: Se cambia la información de un elemento en una posición inválida.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.change_info(lista, 0, 1))
            # Salida esperada: "IndexError: list index out of range"

      - **Posición válida**: Se cambia la información de un elemento en una posición válida.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            print(al.change_info(lista, 1, 3)) # Salida esperada: {'size': 2, 'elements': [1, 3]}

.. py:function:: exchange(my_list, pos_1, pos_2)

   Intercambia la información de dos elementos en las posiciones dadas.

   Intercambia la información de los elementos en las posiciones ``pos_1`` y ``pos_2``.
   Si alguna de las posiciones no es válida, lanza un error :code:`IndexError: list index out of range`.

   :param my_list: Lista en la cual se intercambiará la información de los elementos.
   :type my_list: :ref:`array_list<array-list>`
   :param pos_1: Posición del primer elemento a intercambiar.
   :type pos_1: int
   :param pos_2: Posición del segundo elemento a intercambiar.
   :type pos_2: int

   :returns: Lista con la información de los elementos intercambiada.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega elementos a la lista
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         lista = al.add_last(lista, 3)
         print(lista) # Salida esperada: {'size': 3, 'elements': [1, 2, 3]}

         # Intercambia la información de los elementos en las posiciones 0 y 2
         print(al.exchange(lista, 0, 2)) # Salida esperada: {'size': 3, 'elements': [3, 2, 1]}

   :Test Scenarios:
      - **Posiciones inválidas**: Se intercambia la información de dos elementos en posiciones inválidas.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.exchange(lista, 0, 1))
            # Salida esperada: "IndexError: list index out of range"

      - **Posiciones válidas**: Se intercambia la información de dos elementos en posiciones válidas.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            lista = al.add_last(lista, 3)
            print(al.exchange(lista, 0, 2)) # Salida esperada: {'size': 3, 'elements': [3, 2, 1]}

.. py:function:: sub_list(my_list, pos_i, pos_f)

   Retorna una sublista de la lista original.

   Retorna una sublista de la lista original que contiene los elementos desde la posición ``pos_i`` hasta la posición ``pos_f``.
   Si alguna de las posiciones no es válida, lanza un error :code:`IndexError: list index out of range`.

   :param my_list: Lista de la cual se obtendrá la sublista.
   :type my_list: :ref:`array_list<array-list>`
   :param pos_i: Posición inicial de la sublista.
   :type pos_i: int
   :param pos_f: Posición final de la sublista.
   :type pos_f: int

   :returns: Sublista de la lista original.
   :rtype: :ref:`array_list<array-list>`

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega elementos a la lista
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         lista = al.add_last(lista, 3)
         print(lista) # Salida esperada: {'size': 3, 'elements': [1, 2, 3]}

         # Obtiene la sublista desde la posición 1 hasta la 2
         print(al.sub_list(lista, 1, 2)) # Salida esperada: {'size': 2, 'elements': [2, 3]}

   :Test Scenarios:
      - **Posiciones inválidas**: Se obtiene una sublista de una lista con posiciones inválidas.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Crea una lista vacía
            lista = al.new_list()
            print(al.sub_list(lista, 0, 1))
            # Salida esperada: "IndexError: list index out of range"

      - **Posiciones válidas**: Se obtiene una sublista de una lista con posiciones válidas.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            lista = al.add_last(lista, 3)
            print(al.sub_list(lista, 1, 2)) # Salida esperada: {'size': 2, 'elements': [2, 3]}

.. py:function:: compare_elements(my_list, element, info, cmp_function)

   Compara un elemento con la información de la lista.

   Compara el elemento con la información de la lista utilizando la función de comparación ``cmp_function``.
   Retorna ``True`` si el elemento es igual a la información de la lista, en caso contrario retorna ``False``.

   .. admonition:: Imporante
      :class: note

      Una ``cmp_function`` es una función de comparación que recibe dos elementos y retorna un valor entero. Este valor entero debe ser ``0`` si los elementos son iguales, ``1`` si el primer elemento es mayor que el segundo y ``-1`` en caso contrario.
      Use la función de comparación por defecto :ref:`default_function<default-function-array>` como referencia para crear su propia función de comparación.

   :param my_list: Lista en la cual se comparará la información.
   :type my_list: :ref:`array_list<array-list>`
   :param element: Elemento a comparar.
   :type element: any
   :param info: Información de la lista a comparar.
   :type info: any
   :param cmp_function: Función de comparación.
   :type cmp_function: function

   :returns: ``True`` si el elemento es igual a la información de la lista, ``False`` en caso contrario.
   :rtype: bool

   :Example:
      .. code-block:: python

         # App/logic.py
         from DataStructures.List import array_list as al

         # Función de comparación por defecto
         cmp_function = al.default_function

         # Crea una lista vacía
         lista = al.new_list()

         # Agrega un elemento al final
         lista = al.add_last(lista, 1)
         lista = al.add_last(lista, 2)
         print(al.compare_elements(lista, 2, 2, cmp_function)) # Salida esperada: True

   :Test Scenarios:
      - **Elemento igual a la información**: Se compara un elemento con la información de la lista.

         .. code-block:: python

            # App/logic.py
            from DataStructures.List import array_list as al

            # Función de comparación por defecto
            cmp_function = al.default_function

            # Lista con elementos
            lista = al.new_list()
            lista = al.add_last(lista, 1)
            lista = al.add_last(lista, 2)
            print(al.compare_elements(lista, 2, 2, cmp_function))
            # Salida esperada: True