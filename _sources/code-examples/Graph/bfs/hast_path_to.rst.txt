:Example:

    .. code-block:: python
        :linenos:

        # App/logic.py
        from DataStructures.Graph import digraph as G
        from DataStructures.Graph import bfs as BFS

        # Crear un grafo vacío
        my_graph = G.new_graph(1)

        # Agregar vértices
        my_graph = G.insert_vertex(my_graph, "A", {"nombre": "A"})
        my_graph = G.insert_vertex(my_graph, "B", {"nombre": "B"})
        my_graph = G.insert_vertex(my_graph, "C", {"nombre": "C"})
        my_graph = G.insert_vertex(my_graph, "D", {"nombre": "D"})
        my_graph = G.insert_vertex(my_graph, "E", {"nombre": "E"})

        # Agregar aristas
        my_graph = G.add_edge(my_graph, "A", "B", 1)
        my_graph = G.add_edge(my_graph, "A", "C", 1)
        my_graph = G.add_edge(my_graph, "B", "D", 1)
        my_graph = G.add_edge(my_graph, "C", "E", 1)
        my_graph = G.add_edge(my_graph, "D", "E", 1)

        # Realizar BFS desde el vértice A
        visited_map = BFS.bfs(my_graph, "A")

        # Verificar si existe camino de A a E
        has_path = BFS.has_path_to("E", visited_map)
        print(f"¿Existe camino de A a E? {has_path}")  # True

        # Verificar si existe camino de E a A
        has_path = BFS.has_path_to("A", visited_map)
        print(f"¿Existe camino de E a A? {has_path}")  # True (porque A es el origen)

        # Verificar si existe camino a un vértice que no existe
        has_path = BFS.has_path_to("F", visited_map)
        print(f"¿Existe camino de A a F? {has_path}")  # False 