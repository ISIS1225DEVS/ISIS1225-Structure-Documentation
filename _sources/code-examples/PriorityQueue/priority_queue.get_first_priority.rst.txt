:Example:

    .. code-block:: python

        # App/logic.py
        from DataStructures.Priority_queue import priority_queue as pq

        # Crea una nueva cola de prioridad
        queue = pq.new_heap(True)
        queue = pq.insert(queue, {'name': 'John', 'age': 25}, 25)
        print(pq.get_first_priority(queue))
        # Salida esperada:
        # {
        #   'name': 'John',
        #   'age': 25
        # }
        print(queue)
        # Salida esperada:
        # {
        #   'elements': {
        #     'elements': [
        #       None,
        #       {
        #         'key': 25,
        #         'value': {
        #           'name': 'John',
        #           'age': 25
        #         }
        #       }
        #     ],
        #     'size': 2
        #   },
        #   'size': 1,
        #   'cmp_function': <functiondefault_compare_lower_value>
        # }

:Test Scenarios:

    - **Obtener primer elemento de una cola vacía**: Se intenta obtener el primer elemento de una cola de prioridad vacía.

        .. code-block:: python

            # App/logic.py
            from DataStructures.Priority_queue import priority_queue as pq

            # Crea una nueva cola de prioridad
            queue = pq.new_heap(True)
            print(pq.get_first_priority(queue))
            # Salida esperada: None

    - **Obtener primer elemento de una cola con elementos**: Se obtiene el primer elemento de la cola de prioridad.

        .. code-block:: python

            # App/logic.py
            from DataStructures.Priority_queue import priority_queue as pq

            # Crea una nueva cola de prioridad
            queue = pq.new_heap(True)
            queue = pq.insert(queue, {'name': 'John', 'age': 25}, 25)
            print(pq.get_first_priority(queue))
            # Salida esperada:
            # {
            #   'name': 'John',
            #   'age': 25
            # }
            print(queue)
            # Salida esperada:
            # {
            #   'elements': {
            #     'elements': [
            #       None,
            #       {
            #         'key': 25,
            #         'value': {
            #           'name': 'John',
            #           'age': 25
            #         }
            #       }
            #     ],
            #     'size': 2
            #   },
            #   'size': 1,
            #   'cmp_function': <functiondefault_compare_lower_value>
            # }

    - **Obtener primer elemento de una cola despues de modificaciones**: Se obtiene el primer elemento de la cola de prioridad con varios elementos y después de realizar modificaciones.

        .. code-block:: python

            # App/logic.py
            from DataStructures.Priority_queue import priority_queue as pq

            # Crea una nueva cola de prioridad
            queue = pq.new_heap(True)
            queue = pq.insert(queue, {'name': 'John', 'age': 25}, 25)
            queue = pq.insert(queue, {'name': 'Alice', 'age': 47}, 47)
            queue = pq.insert(queue, {'name': 'Bob', 'age': 18}, 18)
            print(pq.get_first_priority(queue))
            # Salida esperada:
            # {
            #   'name': 'Bob',
            #   'age': 18
            # }
            print(queue)
            # {
            #   'elements': {
            #     'elements': [
            #       None,
            #       {
            #         'key': 18,
            #         'value': {
            #           'name': 'Bob',
            #           'age': 18
            #         }
            #       },
            #       {
            #         'key': 47,
            #         'value': {
            #           'name': 'Alice',
            #           'age': 47
            #         }
            #       },
            #       {
            #         'key': 25,
            #         'value': {
            #           'name': 'John',
            #           'age': 25
            #         }
            #       }
            #     ],
            #     'size': 4
            #   },
            #   'size': 3,
            #   'cmp_function': <functiondefault_compare_lower_value>
            # }
